var moment = require("moment");
var dateTimeFormat = "YYYY-MM-DD";

/**
 * This method is used for validating the request body, and return the validation result with 
 * parsed body in the specific body type.
 * 
 * It also accepts options which indicate several settings, like to specify which attribute
 * is required to be a specific type.
 * 
 * Available options: 
 *  1. attributeType: specify the required type of an attribute
 *      Example: options: {attributeType: {"attributeName1": "String"}}
 *  2. optionalAttributes: specify which attributes are optional
 *      Example: options: {optionalAttributes: ["atrributeName1", "atrributeName2"]}
 * 
 * todo:
 *  1. Formate test ouput
 *  2. Add more options, for example, pair chec, if has a must has b, but if has no a, b is optional.
 *  3. Validate deeper level. For now it only valiate the first level values, if has a value is object, it is unable to check the structure and value in that object
 *  4. Better use the syntax as PropTypes to define and check the object
 * 
 * @param {any} body, the request body
 * @param {any} compareBody, the expecting body
 * @param {any} options
 * @returns 
 */
function validateRequestBody(body, compareBody, options) {
	var res = true;
	var message = "";
	options = options || {};

	var tempNumber = 0;

	for (var key in compareBody) {
		if (compareBody.hasOwnProperty(key)) {
			if (!body.hasOwnProperty(key)) {
				// check options.optionalAttributes
				if (options.optionalAttributes && options.optionalAttributes.indexOf(key) >= 0) {
					// this attribute is optional
				} else {
					res = false;
					message += "Request body should have attribute of " + key + ".\n";
				}
			} else {
				if (options.optionalAttributes && options.optionalAttributes.indexOf(key) >= 0 && body[key] === "") {
					// this attribute is optional and it is empty, so need to check the attributeType
				} else {
					// check options.attributeType
					if (options.attributeType && options.attributeType[key]) {
						if (options.attributeType[key] === "number") {
							tempNumber = parseInt(body[key]);
							if (tempNumber || tempNumber === 0) {
								compareBody[key] = tempNumber;
							} else {
								res = false;
								message += key + " must be type of " + options.attributeType[key] + ".\n";
							}
						} else if (options.attributeType[key] === "boolean") {
							compareBody[key] = parseBoolean(body[key]);
						} else if (options.attributeType[key] === "date") {
							if (moment(body[key], dateTimeFormat).isValid()) {
								compareBody[key] = body[key];							
							} else {
								res = false;
								message += key + " must be a valid date string with format " + dateTimeFormat + ".\n";
							}
						} else if (typeof body[key] === options.attributeType[key]) {
							compareBody[key] = body[key];
						} else {
							res = false;
							message += key + " must be type of " + options.attributeType[key] + ".\n";
						}
					} else {
						compareBody[key] = body[key];
					}
				}					
				
			}
		}
	}
	return {
		result: res,
		message: message,
		body: compareBody
	};
}

exports.validateRequestBody = validateRequestBody;

function parseBoolean(string) {
	if (string === "true") {
		return true;
	} else if (string === true) {
		return true;		
	} else if (string === "1") {
		return true;
	} else if (string === 1) {
		return true;
	} else {
		return false;
	}
}

var hasRunTest = false;
process.argv.forEach(function (val, index, array) {
    if (val === 'test-mode') {
        if (!hasRunTest) {
            performUnitTest();            
        }
    }
});

/**
 * It will perform unit test.
 * 
 * Test scenario 1: (without options, all necessary attribute)
 *  Test with CreateCompanyUserBody and without options.
 *  Having all attributes, should return the body and ture and empty message
 * 
 * Test scenario 2: (without options, missing one)
 *  Test with CreateCompanyUserBody and without options.
 *  Missing Email
 * 
 * Test scenario 3: (without options, missing more than one attributes)
 *  Test with CreateCompanyUserBody and without options.
 *  Missing Email and Password
 * 
 * Test scenario 4: 
 *  Test with RedeemPoint and options.optionalAttributes.
 *  CompanyId is optional
 * 
 * Test scenario 5:
 *  Test with RedeemPoint and options.optionalAttributes.
 *  CompanyId and UserId are optional
 * 
 * Test scenario 6:
 *  Test with RedeemPoint and options.optionalAttributes.
 *  CompanyId and UserId are optional, but still having value for UserId
 * 
 * Test scenario 7:
 *  Test with RedeemPoint and options.attributeType
 *  CompanyId needs to be string
 *  Point needs to be number
 * 
 * Test scenario 8:
 *  Test with options.attributeType and options.optinalAttributes
 * 
 * Test scenario 9:
 *  Test options.optinalAttributes of boolean
 * 
 * */
function performUnitTest() {
	// Scenario 1
	var requestBody1 = {
		Email: "test4321@gmail.com",
		Password: "Password",
		AccessToken: "AccessToken",
		CompanyID: "CompanyID"
	};
	var validateReaults1 = validateRequestBody(requestBody1, new CreateCompanyUserBody());
	console.log("Senario 1", validateReaults1);

	// Scenario 2
	var requestBody2 = {
		Password: "Password",
		AccessToken: "AccessToken",
		CompanyID: "CompanyID"
	};
	var validateReaults2 = validateRequestBody(requestBody2, new CreateCompanyUserBody());
	console.log("Senario 2", validateReaults2);

	// Scenario 3
	var requestBody3 = {
		AccessToken: "AccessToken",
		CompanyID: "CompanyID"
	};
	var validateReaults3 = validateRequestBody(requestBody3, new CreateCompanyUserBody());
	console.log("Senario 3", validateReaults3);

	// Scenario 4
	var requestBody4 = {
		UserId: "UserId",
		Point: "Point",
		PointType: "PointType",
		DateTime: "DateTime",
		StoreId: "StoreId"
	};
	var options = {
		optionalAttributes: ["CompanyId"]
	};
	var validateReaults4 = validateRequestBody(requestBody4, new RedeemPoint(), options);
	console.log("Senario 4", validateReaults4);

	// Scenario 5
	var requestBody5 = {
		Point: "Point",
		PointType: "PointType",
		DateTime: "DateTime",
		StoreId: "StoreId"
	};
	var options = {
		optionalAttributes: ["CompanyId", "UserId"]
	};
	var validateReaults5 = validateRequestBody(requestBody5, new RedeemPoint(), options);
	console.log("Senario 5", validateReaults5);

	// Scenario 6
	var requestBody6 = {
		UserId: "UserId",
		Point: "Point",
		PointType: "PointType",
		DateTime: "DateTime",
		StoreId: "StoreId"
	};
	var options = {
		optionalAttributes: ["CompanyId", "UserId"]
	};
	var validateReaults6 = validateRequestBody(requestBody6, new RedeemPoint(), options);
	console.log("Senario 6", validateReaults6);

	// Scenario 7
	var requestBody7 = {
		CompanyId: "CompanyId",
		UserId: "UserId",
		Point: 10,
		PointType: "PointType",
		DateTime: "DateTime",
		StoreId: "StoreId"
	};
	var options = {
		attributeType: {
			"CompanyId": "string",
			"Point": "number"
		}
	};
	var validateReaults7 = validateRequestBody(requestBody7, new RedeemPoint(), options);
	console.log("Senario 7", validateReaults7);

	// Scenario 8
	var requestBody8 = {
		CompanyId: "CompanyId",
		Point: 10,
		PointType: "PointType",
		DateTime: "DateTime",
		StoreId: "StoreId"
	};
	var options = {
		optionalAttributes: ["UserId"],
		attributeType: {
			"CompanyId": "string",
			"Point": "number"
		}
	};
	var validateReaults8 = validateRequestBody(requestBody8, new RedeemPoint(), options);
	console.log("Senario 8", validateReaults8);

	// Scenario 9
	var requestBody9 = {
		CompanyId: "true",
		Point: 10,
		PointType: "PointType",
		DateTime: "DateTime",
		StoreId: "StoreId"
	};
	var options = {
		optionalAttributes: ["UserId"],
		attributeType: {
			"CompanyId": "boolean",
			"Point": "number"
		}
	};
	var validateReaults9 = validateRequestBody(requestBody9, new RedeemPoint(), options);
	console.log("Senario 9", validateReaults9);

	// Scenario 10
	var requestBody10 = {
		CompanyId: "false",
		Point: 10,
		PointType: "PointType",
		DateTime: "1990-08-10 20:30",
		StoreId: "StoreId"
	};
	var options = {
		optionalAttributes: ["UserId"],
		attributeType: {
			"CompanyId": "boolean",
			"Point": "number",
			"DateTime": "date"
		}
	};
	var validateReaults10 = validateRequestBody(requestBody10, new RedeemPoint(), options);
	console.log("Senario 10", validateReaults10);

	// Scenario 11
	var requestBody11 = {
		CompanyId: "false",
		Point: 10,
		PointType: "PointType",
		DateTime: "eewew",
		StoreId: "StoreId"
	};
	var options = {
		optionalAttributes: ["UserId"],
		attributeType: {
			"CompanyId": "boolean",
			"Point": "number",
			"DateTime": "date"
		}
	};
	var validateReaults11 = validateRequestBody(requestBody11, new RedeemPoint(), options);
	console.log("Senario 11", validateReaults11);

	console.log("Unit test done.");
}

function CreateCompanyUserBody() {
	this.Email = "";
	this.Password = "";
	this.AccessToken = "";
	this.CompanyID = "";
}

function RedeemPoint() {
	this.CompanyId = "";
	this.UserId = "";
	this.Point = "";
	this.PointType = "";
	this.DateTime = "";
	this.StoreId = "";
}